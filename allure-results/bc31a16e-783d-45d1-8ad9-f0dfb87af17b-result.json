{"name": "test_mts_positive", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Target page, context or browser has been closed\n=========================== logs ===========================\nwaiting for navigation until 'load'\n============================================================", "trace": "@allure.feature(\"Домашний интернет и ТВ\")\n    @allure.story(\"Позитивный тест-кейс: Подключение тарифа\")\n    def test_mts_positive():\n        #Инициализируем Playwright и запускаем браузер\n        with sync_playwright() as p:\n            # Запускаем браузер Chromium в режиме отображения (headless=False)\n            browser = p.chromium.launch(headless=False)\n            # Создаем новый контекст и страницу для теста\n            context = browser.new_context()\n            page = context.new_page()\n            try:\n                # Здесь мы добавим шаги теста\n                with allure.step(\"Шаг 1: перейти на сайт mts.ru\"):\n                    page.goto(\"https://www.mts.ru\")\n                    page.wait_for_load_state('load')\n    \n                with allure.step(\"Шаг 2: Выбрать 'Домашний интернет и ТВ'\"):\n                    page.click(\"//span[contains(@class, 'card__right-content') and contains(text(), 'Домашний')]\")\n                    page.wait_for_load_state('load')\n    \n                with allure.step(\"Шаг 3: Выбрать город подключения 'Москва'\"):\n                    # Проверяем, появляется ли окно выбора региона\n                    if page.is_visible(\"text='Выберите ваш регион'\"):\n                        page.click(\"text='Москва'\")\n                    else:\n                        # Проверяем текущий выбранный город\n                        if page.is_visible(\"a[data-id='button_region']\"):\n                            current_city = page.inner_text(\"a[data-id='button_region']\")\n                            if current_city != \"Москва\":\n                                page.click(\"a[data-id='button_region']\")\n                                page.click(\"text='Москва'\")\n    \n                with allure.step(\"Шаг 4: Проверить наличие тарифов и кнопок\"):\n                    page.wait_for_selector(\".card.card__wrapper\", state=\"visible\", timeout=60000)\n                    tariffs = page.locator(\".card.card__wrapper\")\n    \n                    # Проверяем, что на странице есть как минимум 3 тарифа\n                    assert tariffs.count() >= 3, \"Не все тарифы найдены на странице\"\n    \n                    # Проверяем наличие кнопок \"Подключить\" и \"Подробнее\" для каждого тарифа\n                    for i in range(tariffs.count()):\n                        tariff = tariffs.nth(i)\n                        button_on = tariff.locator(\".mm-web-button__text\", has_text=\"Подключить\")\n                        more = tariff.locator(\".mm-web-button__text\", has_text=\"Подробнее\")\n    \n                        assert button_on.count() > 0 and button_on.first.is_visible(), \"Кнопка 'Подключить' не найдена в тарифе\"\n                        assert more.count() > 0 and more.first.is_visible(), \"Кнопка 'Подробнее' не найдена в тарифе\"\n    \n                # Шаг 5: Выбрать тариф и перейти на его страницу\n                with allure.step(\"Шаг 5: Выбрать тариф и перейти на его страницу\"):\n                    # Выбираем первый тариф из списка\n                    first_tariff = tariffs.nth(0)\n                    # Используем локатор для кнопки \"Подробнее\" внутри выбранного тарифа\n                    more_button_locator = first_tariff.locator(\".mm-web-button__text\", has_text=\"Подробнее\")\n                    assert more_button_locator.count() > 0, \"Кнопка 'Подробнее' не найдена в первом тарифе\"\n                    # Кликаем по кнопке \"Подробнее\"\n                    with page.expect_navigation():\n                        more_button_locator.first.click()\n                    # Ждём полной загрузки страницы\n                    page.wait_for_load_state('load')\n    \n                with allure.step(\"Шаг 6: Проверить соответствие информации о тарифе\"):\n                    # Ждем появления элемента с классом 'title'\n                    page.wait_for_selector(\".title\", timeout=10000)\n                    # Получаем элемент с названием тарифа\n                    tariff_name_element = page.locator(\".title\")\n                    assert tariff_name_element.count() > 0, \"Название тарифа не найдено\"\n                    tariff_name = tariff_name_element.first.inner_text().strip()\n                    assert tariff_name != \"\", \"Название тарифа пустое\"\n    \n    \n                with allure.step(\"Шаг 7: Выбрать оптимальную скорость и проверить динамику цены\"):\n                    # Фокусируемся на ползунке\n                    slider = page.locator(\"mat-slider\")\n                    assert slider.count() > 0, \"Ползунок скорости не найден\"\n                    slider.focus()\n    \n                    # Нажимаем клавишу \"ArrowLeft\" несколько раз, чтобы установить минимальное значение\n                    for _ in range(2):\n                        page.keyboard.press(\"ArrowLeft\")\n                        page.wait_for_timeout(500)\n    \n                    # Получаем начальную цену\n                    price_element = page.locator(\".price-value\")\n                    initial_price = price_element.first.inner_text().strip()\n                    print(f\"Initial price: {initial_price}\")\n    \n                    # Нажимаем клавишу \"ArrowRight\" один раз, чтобы увеличить значение\n                    page.keyboard.press(\"ArrowRight\")\n                    page.wait_for_timeout(1000)  # Ждем обновления цены\n    \n                with allure.step(\"Шаг 9: Нажать на кнопку 'Подключить'\"):\n                    # Находим кнопку \"Подключить\" на странице тарифа\n                    connect_button = page.locator(\"button.btn.btn_large.product-header-button\", has_text=\"Подключить\")\n                    assert connect_button.count() > 0, \"Кнопка 'Подключить' не найдена\"\n                    connect_button.first.click()\n                    # Ждем появления формы \"Заявка на подключение\"\n                    page.wait_for_selector(\"form\", timeout=5000)\n    \n                with allure.step(\"Шаг 10: Проверить появление формы и наличие полей\"):\n                    # Проверяем, что форма появилась, ищем по уникальному селектору\n                    form = page.locator(\"div.request-form-popup\")  # Используйте класс верхнего контейнера формы\n                    assert form.count() > 0, \"Форма 'Заявка на подключение' не появилась\"\n    \n                    # Проверяем наличие заголовка формы\n                    form_title = form.locator(\"div.request-form-popup__title\", has_text=\"Заявка на подключение\")\n                    assert form_title.count() > 0, \"Заголовок формы 'Заявка на подключение' не найден\"\n    \n                    # Проверяем наличие поля \"Номер\"\n                    phone_input = form.locator(\"input[placeholder='XXX XXX XX XX']\")\n                    assert phone_input.count() > 0, \"Поле 'Номер' не найдено\"\n    \n                    # Проверяем наличие поля \"Имя\"\n                    name_input = form.locator(\"input[placeholder='Ваше имя']\")\n                    assert name_input.count() > 0, \"Поле 'Имя' не найдено\"\n    \n                    # Проверяем, что форма появилась, ищем по уникальному селектору\n                    form = page.locator(\"div.request-form-popup\")  # Используйте класс верхнего контейнера формы\n                    assert form.count() > 0, \"Форма 'Заявка на подключение' не появилась\"\n    \n                    # Проверяем наличие заголовка формы\n                    form_title = form.locator(\"div.request-form-popup__title\", has_text=\"Заявка на подключение\")\n                    assert form_title.count() > 0, \"Заголовок формы 'Заявка на подключение' не найден\"\n    \n                    # Проверяем наличие поля \"Номер\"\n                    phone_input = form.locator(\"input[placeholder='XXX XXX XX XX']\")\n                    assert phone_input.count() > 0, \"Поле 'Номер' не найдено\"\n    \n                    # Проверяем наличие поля \"Имя\"\n                    name_input = form.locator(\"input[placeholder='Ваше имя']\")\n                    assert name_input.count() > 0, \"Поле 'Имя' не найдено\"\n    \n                with allure.step(\"Шаг 11: Проверить ввод значений в поля формы\"):\n                    # Вводим корректный номер телефона\n                    with allure.step(\"Ввод корректного номера телефона\"):\n                        phone_input.fill(\"9205670465\")\n                        formatted_phone = phone_input.input_value()\n                        print(f\"Введенный номер телефона: {formatted_phone}\")\n                        # Проверяем, что номер отформатирован корректно (при необходимости)\n    \n                    # Вводим имя (если необходимо)\n                    with allure.step(\"Ввод имени\"):\n                        name_input.fill(\"Иван\")\n    \n                    # Нажимаем на кнопку \"Оставить заявку\"\n                    with allure.step(\"Нажать на кнопку 'Оставить заявку'\"):\n                        submit_button = form.locator(\"div.mm-web-button__text\", has_text=\"Оставить заявку\")\n                        assert submit_button.count() > 0, \"Кнопка 'Оставить заявку' не найдена\"\n    \n                        # Ожидаем либо навигации, либо закрытия страницы\n                        with page.expect_navigation() as navigation_info:\n>                           submit_button.first.click()\n\nmts_automation_test\\test_mts_positive.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:85: in __exit__\n    self._event.value\n.venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:59: in value\n    raise exception\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def continuation() -> Optional[Response]:\n>       event = await waiter.result()\nE       playwright._impl._errors.Error: Target page, context or browser has been closed\nE       =========================== logs ===========================\nE       waiting for navigation until 'load'\nE       ============================================================\n\n.venv\\lib\\site-packages\\playwright\\_impl\\_frame.py:208: Error"}, "steps": [{"name": "Шаг 1: перейти на сайт mts.ru", "status": "passed", "start": 1728896792273, "stop": 1728896795299}, {"name": "Шаг 2: Выбрать 'Домашний интернет и ТВ'", "status": "passed", "start": 1728896795299, "stop": 1728896798389}, {"name": "Шаг 3: Выбрать город подключения 'Москва'", "status": "passed", "start": 1728896798389, "stop": 1728896798675}, {"name": "Шаг 4: Проверить наличие тарифов и кнопок", "status": "passed", "start": 1728896798675, "stop": 1728896798921}, {"name": "Шаг 5: Выбрать тариф и перейти на его страницу", "status": "passed", "start": 1728896798921, "stop": 1728896800694}, {"name": "Шаг 6: Проверить соответствие информации о тарифе", "status": "passed", "start": 1728896800694, "stop": 1728896801643}, {"name": "Шаг 7: Выбрать оптимальную скорость и проверить динамику цены", "status": "passed", "start": 1728896801643, "stop": 1728896803790}, {"name": "Шаг 9: Нажать на кнопку 'Подключить'", "status": "passed", "start": 1728896803790, "stop": 1728896803971}, {"name": "Шаг 10: Проверить появление формы и наличие полей", "status": "passed", "start": 1728896803971, "stop": 1728896804072}, {"name": "Шаг 11: Проверить ввод значений в поля формы", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Target page, context or browser has been closed\n=========================== logs ===========================\nwaiting for navigation until 'load'\n============================================================\n", "trace": "  File \"C:\\MTS\\pythonProject\\mts_automation_test\\test_mts_positive.py\", line 157, in test_mts_positive\n    submit_button.first.click()\n  File \"C:\\MTS\\pythonProject\\.venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py\", line 85, in __exit__\n    self._event.value\n  File \"C:\\MTS\\pythonProject\\.venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py\", line 59, in value\n    raise exception\n  File \"C:\\MTS\\pythonProject\\.venv\\lib\\site-packages\\playwright\\_impl\\_frame.py\", line 208, in continuation\n    event = await waiter.result()\n"}, "steps": [{"name": "Ввод корректного номера телефона", "status": "passed", "start": 1728896804072, "stop": 1728896804107}, {"name": "Ввод имени", "status": "passed", "start": 1728896804107, "stop": 1728896804144}, {"name": "Нажать на кнопку 'Оставить заявку'", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Target page, context or browser has been closed\n=========================== logs ===========================\nwaiting for navigation until 'load'\n============================================================\n", "trace": "  File \"C:\\MTS\\pythonProject\\mts_automation_test\\test_mts_positive.py\", line 157, in test_mts_positive\n    submit_button.first.click()\n  File \"C:\\MTS\\pythonProject\\.venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py\", line 85, in __exit__\n    self._event.value\n  File \"C:\\MTS\\pythonProject\\.venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py\", line 59, in value\n    raise exception\n  File \"C:\\MTS\\pythonProject\\.venv\\lib\\site-packages\\playwright\\_impl\\_frame.py\", line 208, in continuation\n    event = await waiter.result()\n"}, "start": 1728896804144, "stop": 1728896809631}], "start": 1728896804072, "stop": 1728896809632}], "attachments": [{"name": "stdout", "source": "dde0fece-3ab9-4802-a638-3998c1b8cc1b-attachment.txt", "type": "text/plain"}], "start": 1728896791388, "stop": 1728896809885, "uuid": "a9a7d1b5-b650-4c9b-aeb8-293f6b6afb62", "historyId": "767f0c2f9ebcd6be32fe0c29514b5778", "testCaseId": "767f0c2f9ebcd6be32fe0c29514b5778", "fullName": "mts_automation_test.test_mts_positive#test_mts_positive", "labels": [{"name": "feature", "value": "Домашний интернет и ТВ"}, {"name": "story", "value": "Позитивный тест-кейс: Подключение тарифа"}, {"name": "parentSuite", "value": "mts_automation_test"}, {"name": "suite", "value": "test_mts_positive"}, {"name": "host", "value": "DESKTOP-UPURTJU"}, {"name": "thread", "value": "33256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "mts_automation_test.test_mts_positive"}]}